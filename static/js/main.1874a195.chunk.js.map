{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/HomePage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","components/Loader/Loader.tsx","api.ts","components/PeoplePage.tsx","components/PageNotFound.tsx","Root.tsx","index.tsx"],"names":["Navigation","getActiveLink","isActive","cn","className","role","to","App","HomePage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","buttonsCenturies","PeopleFilters","setSearchWith","query","get","sex","filterCenturies","getAll","type","placeholder","onChange","event","target","map","century","includes","centuries","filter","item","PersonLink","name","slug","href","PeopleTable","people","urlSlug","useParams","sort","order","tableSort","field","person","born","died","motherName","fatherName","findMother","find","p","findFather","mother","father","Loader","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","errorMessage","setErrorMessage","setSearchParams","filterGender","visiblePeople","peopleArray","filterPeople","normalizeQuery","toLowerCase","trim","length","Math","ceil","a","b","localeCompare","reverse","filteredPeople","useEffect","getPeople","catch","finally","PageNotFound","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.1874a195.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nexport const Navigation = () => {\n  const getActiveLink = ({ isActive }: { isActive: boolean }) => (\n    cn('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    })\n  );\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getActiveLink}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"/people\"\n            className={getActiveLink}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\n\nimport './App.scss';\nimport { Navigation } from './components/Navbar';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navigation />\n\n      <Outlet />\n    </div>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../utils/searchHelper';\n\ntype Props = {\n  setSearchWith: (params: SearchParams) => void;\n};\n\nconst buttonsCenturies = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters: React.FC<Props> = ({ setSearchWith }) => {\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || null;\n  const filterCenturies = searchParams.getAll('century') || [];\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={cn({\n            'is-active': sex === null,\n          })}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: null }}\n          className={cn({\n            'is-active': sex === 'm',\n          })}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: null }}\n          className={cn({\n            'is-active': sex === 'f',\n          })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            // eslint-disable-next-line max-len\n            onChange={(event) => setSearchWith({ query: event.target.value || null })}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {buttonsCenturies.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={cn('button mr-1', {\n                  'is-info': filterCenturies.includes(century),\n                })}\n                params={{\n                  centuries: filterCenturies.includes(century)\n                    ? filterCenturies.filter(item => item !== century)\n                    : [...filterCenturies, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: null,\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import cn from 'classnames';\n\ntype Props = {\n  name: string | null,\n  slug: string,\n  sex: string,\n};\n\nexport const PersonLink: React.FC<Props> = ({ name, slug, sex }) => {\n  return (\n    <a\n      href={`#/people/${slug}`}\n      className={cn({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </a>\n  );\n};\n\n// import { Link, useSearchParams } from 'react-router-dom';\n// import cn from 'classnames';\n\n// type Props = {\n//   name: string | null,\n//   slug: string,\n//   sex: string,\n// };\n\n// export const PersonLink: React.FC<Props> = ({ name, slug, sex }) => {\n//   const [searchParams] = useSearchParams();\n\n//   return (\n//     <Link\n//       to={{\n//         pathname: `#/people/${slug}`,\n//         search: searchParams.toString(),\n//       }}\n//       className={cn({\n//         'has-text-danger': sex === 'f',\n//       })}\n//     >\n//       {name}\n//     </Link>\n//   );\n// };\n","import { Link, useParams, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../utils/searchHelper';\n\nexport const PeopleTable = ({ people }: { people: Person[] }) => {\n  const { slug: urlSlug } = useParams();\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort') || null;\n  const order = searchParams.get('order') || null;\n\n  const tableSort = (field: string) => {\n    if (!sort || sort !== field) {\n      return {\n        sort: field,\n      };\n    }\n\n    if (sort === field && !order) {\n      return {\n        sort: field,\n        order: 'desc',\n      };\n    }\n\n    return {\n      sort: null,\n      order: null,\n    };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink\n                params={tableSort('name') as SearchParams}\n              >\n                <span className=\"icon\">\n                  <i className={cn('fas fa-sort', {\n                    'fa-sort-up': sort === 'name' && !order,\n                    'fa-sort-down': sort === 'name' && order,\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink\n                params={tableSort('sex') as SearchParams}\n              >\n                <span className=\"icon\">\n                  <i className={cn('fas fa-sort', {\n                    'fa-sort-up': sort === 'name' && !order,\n                    'fa-sort-down': sort === 'name' && order,\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink\n                params={tableSort('born') as SearchParams}\n              >\n                <span className=\"icon\">\n                  <i className={cn('fas fa-sort', {\n                    'fa-sort-up': sort === 'name' && !order,\n                    'fa-sort-down': sort === 'name' && order,\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink\n                params={tableSort('died') as SearchParams}\n              >\n                <span className=\"icon\">\n                  <i className={cn('fas fa-sort', {\n                    'fa-sort-up': sort === 'name' && !order,\n                    'fa-sort-down': sort === 'name' && order,\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const {\n            name,\n            sex,\n            born,\n            died,\n            motherName,\n            fatherName,\n            slug,\n          } = person;\n\n          const findMother = people.find(p => p.name === motherName);\n          const findFather = people.find(p => p.name === fatherName);\n\n          const mother = findMother ? (\n            <PersonLink\n              name={motherName}\n              sex={findMother.sex}\n              slug={findMother.slug}\n            />\n          ) : motherName;\n\n          const father = findFather ? (\n            <PersonLink\n              name={fatherName}\n              sex={findFather.sex}\n              slug={findFather.slug}\n            />\n          ) : fatherName;\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={slug}\n              className={cn({\n                'has-background-warning': slug === urlSlug,\n              })}\n            >\n              <td>\n                <Link\n                  to={`${slug}`}\n                  className={cn({\n                    'has-text-danger': sex === 'f',\n                  })}\n                >\n                  {name}\n                </Link>\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>{mother || '-'}</td>\n              <td>{father || '-'}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { PeopleTable } from './PeopleTable';\nimport { Loader } from './Loader';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { SearchParams, getSearchWith } from '../utils/searchHelper';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const filterGender = searchParams.get('sex') || 'all';\n  const filterCenturies = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || null;\n  const order = searchParams.get('order') || null;\n\n  const filteredPeople = (peopleArray: Person[]) => {\n    let filterPeople = [...peopleArray];\n\n    if (query) {\n      const normalizeQuery = query.toLowerCase().trim();\n\n      filterPeople = filterPeople.filter(person => (\n        person.name.toLowerCase().includes(normalizeQuery)\n        || person.motherName?.toLowerCase().includes(normalizeQuery)\n        || person.fatherName?.toLowerCase().includes(normalizeQuery)\n      ));\n    }\n\n    if (filterGender !== 'all') {\n      filterPeople = filterPeople.filter(person => (\n        person.sex === filterGender\n      ));\n    }\n\n    if (filterCenturies.length > 0) {\n      filterPeople = filterPeople.filter(person => {\n        const century = Math.ceil(person.born / 100).toString();\n\n        return filterCenturies.includes(century);\n      });\n    }\n\n    if (sort) {\n      switch (sort) {\n        case 'name':\n        case 'sex':\n          return filterPeople.sort((a, b) => a[sort].localeCompare(b[sort]));\n\n        case 'born':\n        case 'died':\n          return filterPeople.sort((a, b) => a[sort] - b[sort]);\n\n        default:\n          return filterPeople;\n      }\n    }\n\n    if (order === 'desc') {\n      filterPeople.reverse();\n    }\n\n    return filterPeople;\n  };\n\n  const visiblePeople = filteredPeople(people);\n\n  const setSearchWith = (params: SearchParams) => {\n    const search = getSearchWith(searchParams, params);\n\n    setSearchParams(search);\n  };\n\n  useEffect(() => {\n    getPeople()\n      .then(setPeople)\n      .catch(() => setErrorMessage(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!isLoading && (\n              <PeopleFilters\n                setSearchWith={setSearchWith}\n              />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <PeopleTable\n                  people={visiblePeople}\n                />\n              )}\n\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!people.length && !isLoading && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!isLoading && !visiblePeople.length && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const PageNotFound = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  HashRouter, Navigate, Route, Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { PageNotFound } from './components/PageNotFound';\n\nexport const Root = () => (\n  <HashRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n\n        <Route path=\"people\" element={<PeoplePage />}>\n          <Route path=\":slug\" element={<PeoplePage />} />\n        </Route>\n\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"*\" element={<PageNotFound />} />\n      </Route>\n    </Routes>\n  </HashRouter>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}